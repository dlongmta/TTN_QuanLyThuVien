using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using BUS;

namespace BTL_QUANLYTHUVIEN
{
    public partial class frmDocGia : Form
    {
        #region các biến
        public bool them = true;
        public bool sua = false;
        public int soLuongSV = 0;
        public bool daChuanhoa = false;
        #endregion
        public frmDocGia()
        {
            InitializeComponent();
            Enabled(false);
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            //sqlDataSource1.Fill();
        }

        private void btnSua_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //nbcThongTinDocGia.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            nbcDSDocGia.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded; 
        }

  
        public void Enabled(bool logged)
        {
            //Mac dinh la dang nhap thanh cong bat het cac Menu

            //
            btnThem.Enabled = logged;
            btnSua.Enabled = logged;
            btnXoa.Enabled = logged;
            //  btnThoat.Enabled = logged;
            // btnXuatExcel.Enabled = logged;
            //btnNhapExcel.Enabled = logged;
           // btnXemDiem.Enabled = logged;
            //btnCapNhat.Enabled = logged;
            btnLuu.Enabled = logged;
            btnHuy.Enabled = logged;
           // btnDSMuon.Enabled = logged;
        }
        public void load()
        {
            DGbindingSource.DataSource = DocGia_BUS.DanhSachDG();
            gcDocGia.DataSource = DGbindingSource;
        }
        private void gvDocGia_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if (gvDocGia.FocusedRowHandle >= 0)
            {
                tbMaDG.Text = gvDocGia.GetFocusedRowCellValue(colMaDG).ToString();
                tbTenDG.Text = gvDocGia.GetFocusedRowCellValue(colTenDG).ToString();
                //ToUpper để convert sang chữ in hoa
                if (gvDocGia.GetFocusedRowCellValue(colGioiTinh).ToString().ToUpper() == "NAM") cboGioiTinh.SelectedIndex = 0;
                else cboGioiTinh.SelectedIndex = 1;
                if (gvDocGia.GetFocusedRowCellValue(colNgaySinh).ToString() != "")
                    dtpNgaySinh.Value = DateTime.Parse(gvDocGia.GetFocusedRowCellValue(colNgaySinh).ToString());
                if (gvDocGia.GetFocusedRowCellValue(colNgayCapThe).ToString() != "")
                    dtpNgayCapThe.Value = DateTime.Parse(gvDocGia.GetFocusedRowCellValue(colNgayCapThe).ToString());
                if (gvDocGia.GetFocusedRowCellValue(colNgayHetHan).ToString() != "")
                    dtpNgayHetHan.Value = DateTime.Parse(gvDocGia.GetFocusedRowCellValue(colNgayHetHan).ToString());
                tbSDT.Text = gvDocGia.GetFocusedRowCellValue(colSDT).ToString();
                tbDiaChi.Text = gvDocGia.GetFocusedRowCellValue(colDiaChi).ToString();
                tbDonVi.Text = gvDocGia.GetFocusedRowCellValue(colDonVi).ToString();
                sua = false;
            }
        }

        private void btnDSDocGia_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Enabled(true);
            load();
        }

        private void btnSua_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            nbcDSDocGia.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            tbTenDG.Focus();
        }

        private void btnThem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            nbcDSDocGia.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            if (them)
            {
                tbTenDG.Clear();
                tbDiaChi.Clear();
                tbSDT.Clear();
                tbDonVi.Clear();
                string maDG = nextMa(DocGia_BUS.LastMaDG());
                //
                them = false;
                DGbindingSource.AddNew();
                //mã sinh viên tự tăng
                gvDocGia.SetFocusedRowCellValue(colMaDG, maDG);
                tbMaDG.Text = maDG.ToString();
                //trỏ tới dòng cuối cùng trong gridview
                gvDocGia.FocusedRowHandle = gvDocGia.RowCount - 1;
                tbTenDG.Focus();

            }
            else
            {
                gvDocGia.FocusedRowHandle = gvDocGia.RowCount - 1;
                tbTenDG.Focus();
            }
            // frm.Show();
        }
        public string ChuanHoa(string st)
        {
            string st1 = "";
            st = st.Trim();
            while (st.Length != 0)
            {
                st += " ";
                int i = st.IndexOf(' ');
                string s = char.ToUpper(st[0]) + st.Substring(1, i);
                st1 += s;
                st = st.Substring(i + 1).Trim();
            }
            return st1.Trim();
        }
        //Hàm tự tăng mã THỂ loại
        public string nextMa(string s)
        {
            string sub1 = s.Substring(0, 2);
            string sub2 = s.Substring(2).Trim();
            int ma = Convert.ToInt32(sub2) + 1;
            string sub = "";
            //chèn thêm các kí tự 0 vào mã
            for (int i = 0; i < sub2.Length - ma.ToString().Length; i++)
                sub += "0";
            sub += ma.ToString();
            sub1 += sub;
            //
            return sub1;
        }

        private void btnLuu_Click(object sender, EventArgs e)
        {
            try
            {
                if (!them && gvDocGia.FocusedRowHandle == gvDocGia.RowCount - 1)
                {
                    if (tbTenDG.Text != "")
                    {
                        //chuẩn hóa tên
                        string maDG = tbMaDG.Text;
                        string tenDG = ChuanHoa(tbTenDG.Text.ToLower());
                        string gioiTinh = cboGioiTinh.Text;
                        string diaChi = ChuanHoa(tbDiaChi.Text.ToLower());
                        string sdt = tbSDT.Text;
                        string donVi = ChuanHoa(tbDonVi.Text.ToLower());

                        DocGia_BUS.themDG(maDG, tenDG, gioiTinh, dtpNgaySinh.Value, diaChi, sdt, dtpNgayCapThe.Value, dtpNgayHetHan.Value, donVi);
                        MessageBox.Show("Thêm thành công");
                        // this.SinhVienbindingSource.EndEdit();
                        //thêm trực tiếp sinh viên vào gridview mà không load lại danh sách
                        gvDocGia.SetFocusedRowCellValue(colTenDG, tenDG);
                        gvDocGia.SetFocusedRowCellValue(colGioiTinh, gioiTinh);
                        gvDocGia.SetFocusedRowCellValue(colNgaySinh, dtpNgaySinh.Value);
                        gvDocGia.SetFocusedRowCellValue(colDiaChi, diaChi);
                        gvDocGia.SetFocusedRowCellValue(colSDT, sdt);
                        gvDocGia.SetFocusedRowCellValue(colDonVi, donVi);
                        gvDocGia.SetFocusedRowCellValue(colNgayCapThe, dtpNgayCapThe.Value);
                        gvDocGia.SetFocusedRowCellValue(colNgayHetHan, dtpNgayHetHan.Value);
                        //load_DS();
                        //chuẩn hóa ở textbox
                        tbTenDG.Text = tenDG;
                        tbDonVi.Text = donVi;
                        tbDiaChi.Text = diaChi;
                        //
                        them = true;
                    }
                    else
                        MessageBox.Show("Nhập tên độc giả");
                }
                else
                {
                    if (MessageBox.Show("Bạn có chắc muốn sửa không?", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        try
                        {
                            string maDG = tbMaDG.Text;
                            string tenDG = ChuanHoa(tbTenDG.Text.ToLower());
                            string gioiTinh = cboGioiTinh.Text;
                            string diaChi = ChuanHoa(tbDiaChi.Text.ToLower());
                            string sdt = tbSDT.Text;
                            string donVi = ChuanHoa(tbDonVi.Text.ToLower());
                            if (tenDG != gvDocGia.GetFocusedRowCellValue(colTenDG).ToString().Trim())
                            {
                                //DocGia_BUS.suaSV_HoSV(tbMaSV.Text.Trim(), ChuanHoa(tbHoSV.Text.Trim().ToLower()));
                                DocGia_BUS.suaDG_Ten(maDG, tenDG);
                                gvDocGia.SetFocusedRowCellValue(colTenDG, tenDG);
                                tbTenDG.Text = tenDG;
                            }
                            else
                                tbTenDG.Text = tenDG;
                            if (diaChi != gvDocGia.GetFocusedRowCellValue(colDiaChi).ToString().Trim())
                            {
                                //DocGia_BUS.suaSV_TenSV(tbMaSV.Text.Trim(), ChuanHoa(tbTenSV.Text.Trim().ToLower()));
                                DocGia_BUS.suaDG_dc(maDG, diaChi);
                                gvDocGia.SetFocusedRowCellValue(colDiaChi, diaChi);
                                tbDiaChi.Text = diaChi;
                            }
                            else
                                tbDiaChi.Text = diaChi;
                            if (cboGioiTinh.Text.Trim() != gvDocGia.GetFocusedRowCellValue(colGioiTinh).ToString().Trim())
                            {
                                //DocGia_BUS.suaSV_GioiTinh(tbMaSV.Text.Trim(), cboGioiTinh.Text.Trim());
                                DocGia_BUS.suaDG_gt(maDG, gioiTinh);
                                gvDocGia.SetFocusedRowCellValue(colGioiTinh, cboGioiTinh.Text);
                            }
                            if (gvDocGia.GetFocusedRowCellValue(colNgaySinh).ToString() == "" || dtpNgaySinh.Value != DateTime.Parse(gvDocGia.GetFocusedRowCellValue(colNgaySinh).ToString()))
                            {
                                //DocGia_BUS.suaSV_NgaySinh(tbMaSV.Text.Trim(), dtpNgaySinh.Value);
                                DocGia_BUS.suaDG_ns(maDG, dtpNgaySinh.Value);
                                gvDocGia.SetFocusedRowCellValue(colNgaySinh, dtpNgaySinh.Value);
                            }
                            if (gvDocGia.GetFocusedRowCellValue(colNgayCapThe).ToString() == "" || dtpNgayCapThe.Value != DateTime.Parse(gvDocGia.GetFocusedRowCellValue(colNgayCapThe).ToString()))
                            {
                                //DocGia_BUS.suaSV_NgayNhapHoc(tbMaSV.Text.Trim(), dtpNgayNhapHoc.Value);
                                DocGia_BUS.suaDG_nct(maDG, dtpNgayCapThe.Value);
                                gvDocGia.SetFocusedRowCellValue(colNgayCapThe, dtpNgayCapThe.Value);
                            }
                            if (gvDocGia.GetFocusedRowCellValue(colNgayHetHan).ToString() == "" || dtpNgayHetHan.Value != DateTime.Parse(gvDocGia.GetFocusedRowCellValue(colNgayHetHan).ToString()))
                            {
                                DocGia_BUS.suaDG_nhh(maDG, dtpNgayHetHan.Value);
                                //DocGia_BUS.suaSV_NgayNhapHoc(tbMaSV.Text.Trim(), dtpNgayNhapHoc.Value);
                                gvDocGia.SetFocusedRowCellValue(colNgayHetHan, dtpNgayHetHan.Value);
                            }
                            if (donVi != gvDocGia.GetFocusedRowCellValue(colDonVi).ToString().Trim())
                            {
                               // DocGia_BUS.suaSV_DiaChi(tbMaSV.Text.Trim(), ChuanHoa(tbDiaChi.Text.Trim().ToLower()));
                                DocGia_BUS.suaDG_dv(maDG, donVi);
                                gvDocGia.SetFocusedRowCellValue(colDonVi, donVi);
                                tbDonVi.Text = donVi;
                            }
                            else
                                tbDonVi.Text = donVi;
                            if (sdt != gvDocGia.GetFocusedRowCellValue(colSDT).ToString().Trim())
                            {
                                DocGia_BUS.suaDG_sdt(maDG, sdt);
                                //DocGia_BUS.suaSV_NoiSinh(tbMaSV.Text.Trim(), ChuanHoa(tbNoiSinh.Text.Trim().ToLower()));
                                gvDocGia.SetFocusedRowCellValue(colSDT, sdt);
                                //tbNoiSinh.Text = ChuanHoa(tbNoiSinh.Text.Trim().ToLower());
                            }
                           

                            MessageBox.Show("Sửa thành công!");
                            sua = true;
                        }
                        catch
                        {
                            MessageBox.Show("Sửa không thành công");
                        }
                    }
                    else
                    {
                        tbMaDG.Text = gvDocGia.GetFocusedRowCellValue(colMaDG).ToString();
                        tbTenDG.Text = gvDocGia.GetFocusedRowCellValue(colTenDG).ToString();
                        //ToUpper để convert sang chữ in hoa
                        if (gvDocGia.GetFocusedRowCellValue(colGioiTinh).ToString().ToUpper() == "NAM") cboGioiTinh.SelectedIndex = 0;
                        else cboGioiTinh.SelectedIndex = 1;
                        if (gvDocGia.GetFocusedRowCellValue(colNgaySinh).ToString() != "")
                            dtpNgaySinh.Value = DateTime.Parse(gvDocGia.GetFocusedRowCellValue(colNgaySinh).ToString());
                        if (gvDocGia.GetFocusedRowCellValue(colNgayCapThe).ToString() != "")
                            dtpNgayCapThe.Value = DateTime.Parse(gvDocGia.GetFocusedRowCellValue(colNgayCapThe).ToString());
                        if (gvDocGia.GetFocusedRowCellValue(colNgayHetHan).ToString() != "")
                            dtpNgayHetHan.Value = DateTime.Parse(gvDocGia.GetFocusedRowCellValue(colNgayHetHan).ToString());
                        tbSDT.Text = gvDocGia.GetFocusedRowCellValue(colSDT).ToString();
                        tbDiaChi.Text = gvDocGia.GetFocusedRowCellValue(colDiaChi).ToString();
                        tbDonVi.Text = gvDocGia.GetFocusedRowCellValue(colDonVi).ToString();
                    }
                }

            }
            catch
            {
                MessageBox.Show("Lưu thất bại");
            }
        }

        private void tbSDT_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!Char.IsDigit(e.KeyChar) && !Char.IsControl(e.KeyChar))
            {
                e.Handled = true;
            }
        }

        private void btnHuy_Click(object sender, EventArgs e)
        {
            if (!them && gvDocGia.FocusedRowHandle == gvDocGia.RowCount - 1)
            {
                them = true;
                DGbindingSource.RemoveAt(gvDocGia.RowCount - 1);
            }
            //hủy khi sửa
            else
            {
                tbMaDG.Text = gvDocGia.GetFocusedRowCellValue(colMaDG).ToString();
                tbTenDG.Text = gvDocGia.GetFocusedRowCellValue(colTenDG).ToString();
                //ToUpper để convert sang chữ in hoa
                if (gvDocGia.GetFocusedRowCellValue(colGioiTinh).ToString().ToUpper() == "NAM") cboGioiTinh.SelectedIndex = 0;
                else cboGioiTinh.SelectedIndex = 1;
                if (gvDocGia.GetFocusedRowCellValue(colNgaySinh).ToString() != "")
                    dtpNgaySinh.Value = DateTime.Parse(gvDocGia.GetFocusedRowCellValue(colNgaySinh).ToString());
                if (gvDocGia.GetFocusedRowCellValue(colNgayCapThe).ToString() != "")
                    dtpNgayCapThe.Value = DateTime.Parse(gvDocGia.GetFocusedRowCellValue(colNgayCapThe).ToString());
                if (gvDocGia.GetFocusedRowCellValue(colNgayHetHan).ToString() != "")
                    dtpNgayHetHan.Value = DateTime.Parse(gvDocGia.GetFocusedRowCellValue(colNgayHetHan).ToString());
                tbSDT.Text = gvDocGia.GetFocusedRowCellValue(colSDT).ToString();
                tbDiaChi.Text = gvDocGia.GetFocusedRowCellValue(colDiaChi).ToString();
                tbDonVi.Text = gvDocGia.GetFocusedRowCellValue(colDonVi).ToString();
            }
        }

        private void btnXoa_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (MessageBox.Show("Bạn có chắc muốn xóa không?", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                //DocGia_BUS.xoaSV(gvDocGia.GetFocusedRowCellValue(colMaSV).ToString());
                DocGia_BUS.xoaDG(gvDocGia.GetFocusedRowCellValue(colMaDG).ToString());
                DGbindingSource.RemoveAt(gvDocGia.FocusedRowHandle);
                MessageBox.Show("Xóa thành công!");
            }
        }

        private void btnCapNhap_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            load();
        }
        #region Tìm kiếm
        //tìm kiếm tất cả
        private void chkTatCa_CheckedChanged_1(object sender, EventArgs e)
        {
            if (chkTatCa.Checked)
            {
                gvDocGia.OptionsFind.FindFilterColumns = "*";
                chkMaDocGia.Checked = false;
                chkTenDocGia.Checked = false;
                chkDonVi.Checked = false;
                chkDiaChi.Checked = false;  
            }
        }
        //kiểm tra các checkbox tìm kiếm
        private string testCheckTimKiem()
        {
            gvDocGia.OptionsFind.FindFilterColumns = "";
            if (chkMaDocGia.Checked)
            {
                gvDocGia.OptionsFind.FindFilterColumns += "MaDG;";
            }          
            if (chkTenDocGia.Checked)
            {
                gvDocGia.OptionsFind.FindFilterColumns += "TenDG;";
            }
            if (chkDonVi.Checked)
            {
                gvDocGia.OptionsFind.FindFilterColumns += "DonVi;";
            }
            if (chkDiaChi.Checked)
            {
                gvDocGia.OptionsFind.FindFilterColumns += "DiaChi;";
            }
            if (!chkMaDocGia.Checked && !chkTenDocGia.Checked && !chkDonVi.Checked && !chkDiaChi.Checked  )
                gvDocGia.OptionsFind.FindFilterColumns = "*";
            return gvDocGia.OptionsFind.FindFilterColumns;
        }
        private void chkMaMaDocGia_CheckedChanged(object sender, EventArgs e)
        {
            if (chkMaDocGia.Checked)
            {
                gvDocGia.OptionsFind.FindFilterColumns = testCheckTimKiem();
                chkTatCa.Checked = false;
            }
            else gvDocGia.OptionsFind.FindFilterColumns = testCheckTimKiem();
        }

        private void chkTenDocGia_CheckedChanged(object sender, EventArgs e)
        {
            if (chkTenDocGia.Checked)
            {
                gvDocGia.OptionsFind.FindFilterColumns = testCheckTimKiem();
                chkTatCa.Checked = false;
            }
            else gvDocGia.OptionsFind.FindFilterColumns = testCheckTimKiem();
        }


        private void chkDonVi_CheckedChanged(object sender, EventArgs e)
        {
            if (chkDonVi.Checked)
            {
                gvDocGia.OptionsFind.FindFilterColumns = testCheckTimKiem();
                chkTatCa.Checked = false;
            }
            else gvDocGia.OptionsFind.FindFilterColumns = testCheckTimKiem();
        }

        private void chkDiaChi_CheckedChanged(object sender, EventArgs e)
        {
            if (chkDiaChi.Checked)
            {
                gvDocGia.OptionsFind.FindFilterColumns = testCheckTimKiem();
                chkTatCa.Checked = false;
            }
            else gvDocGia.OptionsFind.FindFilterColumns = testCheckTimKiem();
        }

       
        #endregion

    }
}
